---
# Task Worker ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: task-worker-config
  namespace: task-scheduler
data:
  config.toml: |
    [worker]
    max_concurrent_tasks = 10
    metrics_address = "0.0.0.0:9001"
    mode = "worker"
    
    [queue]
    nats_url = "nats://nats.task-scheduler.svc.cluster.local:4222"
    batch_size = 10
    fetch_timeout_seconds = 30
    
    [kubernetes]
    enabled = true
    namespace = "task-scheduler"
    worker_image = "task-worker:latest"
    service_account = "task-worker"
    
    [plugins]
    plugin_dirs = ["/plugins"]
    auto_load = true
    plugin_patterns = ["*.so", "*.dll", "*.dylib"]
    
    [observability]
    tracing_enabled = true
    otlp_endpoint = "http://jaeger.task-scheduler.svc.cluster.local:4317"
    service_name = "task-worker"
    log_level = "debug"
    sampling_ratio = 1.0
---
# Task Worker Service (for metrics)
apiVersion: v1
kind: Service
metadata:
  name: task-worker
  namespace: task-scheduler
  labels:
    app: task-worker
    component: data-plane
spec:
  type: ClusterIP
  ports:
  - name: metrics
    port: 9001
    targetPort: 9001
    protocol: TCP
  selector:
    app: task-worker
---
# Task Worker DaemonSet
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: task-worker
  namespace: task-scheduler
  labels:
    app: task-worker
    component: data-plane
spec:
  selector:
    matchLabels:
      app: task-worker
  template:
    metadata:
      labels:
        app: task-worker
        component: data-plane
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: task-worker
      containers:
      - name: task-worker
        image: task-worker:latest
        imagePullPolicy: IfNotPresent
        args:
        - --config
        - /etc/task-worker/config.toml
        ports:
        - name: metrics
          containerPort: 9001
          protocol: TCP
        env:
        - name: RUST_LOG
          value: "info,task_worker=debug"
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: WORKER_ID
          value: "$(NODE_NAME)-$(POD_NAME)"
        volumeMounts:
        - name: config
          mountPath: /etc/task-worker
          readOnly: true
        - name: plugins
          mountPath: /plugins
          readOnly: true
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 2000m
            memory: 2Gi
        livenessProbe:
          httpGet:
            path: /health
            port: metrics
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: metrics
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config
        configMap:
          name: task-worker-config
      - name: plugins
        emptyDir: {}
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
        operator: Exists
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
        operator: Exists
---
# Alternative: Task Worker Deployment (if you prefer deployment over daemonset)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: task-worker-deployment
  namespace: task-scheduler
  labels:
    app: task-worker
    component: data-plane
spec:
  replicas: 3
  selector:
    matchLabels:
      app: task-worker-deployment
  template:
    metadata:
      labels:
        app: task-worker-deployment
        component: data-plane
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: task-worker
      containers:
      - name: task-worker
        image: task-worker:latest
        imagePullPolicy: IfNotPresent
        args:
        - --config
        - /etc/task-worker/config.toml
        - --max-concurrent-tasks
        - "20"
        ports:
        - name: metrics
          containerPort: 9001
          protocol: TCP
        env:
        - name: RUST_LOG
          value: "info,task_worker=debug"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: config
          mountPath: /etc/task-worker
          readOnly: true
        - name: plugins
          mountPath: /plugins
          readOnly: true
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 4000m
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /health
            port: metrics
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: metrics
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config
        configMap:
          name: task-worker-config
      - name: plugins
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - task-worker-deployment
              topologyKey: kubernetes.io/hostname
---
# HorizontalPodAutoscaler for Task Worker Deployment
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: task-worker-hpa
  namespace: task-scheduler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: task-worker-deployment
  minReplicas: 3
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80